---
# Here we are going to do some plumbings because when VMs are reserved with the enoslib vmonG5K provider, they are not automatically configured with IPv6 addresses.

- name: Enable IPv6 on host nodes
  tags: [ create ]
  delegate_to: localhost
  run_once: true
  block:
    - name: Set grid_node fact
      set_fact:
        vm_host_inventory: "{{ groups['vm_grid5000'] | map('extract', hostvars) | map(attribute='grid_node') | list | unique }}"

    - name: Enable IPv6 on each host node
      command: dhclient -6 br0
      delegate_to: "{{ item }}"
      with_items: "{{ vm_host_inventory }}"

    - name: Enable IPv6 forwarding on each host node
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: 1
        sysctl_set: true
        state: present
      delegate_to: "{{ item }}"
      with_items: "{{ vm_host_inventory }}"

    - name: Retrieve host node IPv6 address on br0
      shell: ip -6 -br addr show dev br0 scope global | awk '{print $3}'
      register: host_ipv6
      delegate_to: "{{ item }}"
      with_items: "{{ vm_host_inventory }}"
      changed_when: false

    - name: Create dictionary of hostnames and their IPv6 addresses
      set_fact:
        host_ipv6_dict: "{{ host_ipv6_dict | default({}) | combine({item.item: item.stdout}) }}"
      with_items: "{{ host_ipv6.results }}"

# Disable all firewall rules for IPv6 on each node hosting VMs (https://www.grid5000.fr/w/Reconfigurable_Firewall)
- name: Disable all firewall rules
  run_once: true
  tags: [ create ]
  become: false
  block:
    - name: Retrieve OAR_JOB_ID from each host
      shell: echo $OAR_JOB_ID
      register: oar_job_id
      delegate_to: "{{ item }}"
      with_items: "{{ host_ipv6_dict }}"
      changed_when: false

    - name: Create dictionary of hostnames and their OAR_JOB_ID
      set_fact:
        oar_job_id_dict: "{{ oar_job_id_dict | default({}) | combine({item.item: item.stdout}) }}"
      with_items: "{{ oar_job_id.results }}"
      delegate_to: localhost

    - name: Disable firewall rules for each node hosting VMs
      uri:
        url: "https://api.grid5000.fr/stable/sites/{{ site }}/firewall/{{ job_id }}"
        method: POST
        body: '[{"addr": "{{ ipv6node }}", "proto": "all"}]'
        body_format: json
        status_code: 200
        headers:
          Content-Type: "application/json"
      with_items: "{{ oar_job_id_dict }}"
      loop_control:
        loop_var: item
      vars:
        site: "{{ item.split('.')[1] }}"
        ipv6node: "{{ host_ipv6_dict[item] }}"
        job_id: "{{ oar_job_id_dict[item] }}"
      register: curl_result
      delegate_to: "{{ site }}.g5k"
      failed_when: >
        curl_result.status != 200 and
        not (curl_result.status == 400 and 'already exists' in curl_result.json)

- name: Generate and set unique IPv6 addresses for VMs
  tags: [ create ]
  block:
    - name: Retrieve IPv6 address from host_ipv6_dict[grid_node]. The last field of the IPv6 address is randomized based on the hash of the inventory_hostname
      set_fact:
        vm_ipv6: "{{ host_ipv6_dict[grid_node].split('/')[0] | regex_replace('(?<=:)[0-9a-fA-F]+$', ( inventory_hostname | hash('md5') | int('0', 16) % 1000) | string) }}"
      vars:
        grid_node: "{{ hostvars[inventory_hostname].grid_node }}"
      delegate_to: "{{ inventory_hostname }}"
      changed_when: false

    - name: Check if IPv6 address exists on ens3 interface
      shell: ip -6 addr show dev ens3 | grep -q '{{ vm_ipv6 }}'
      register: ipv6_check
      ignore_errors: true
      changed_when: false

    - name: Set IPv6 address to ens3 interface
      shell: ip -6 addr add {{ vm_ipv6 }} dev ens3
      when: ipv6_check.rc != 0
      changed_when: true
