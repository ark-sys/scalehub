---
# Here we are going to do some plumbings because when VMs are reserved with the enoslib vmonG5K provider, they are not automatically configured with IPv6 addresses.

# Disable all firewall rules for IPv6 on each node hosting VMs (https://www.grid5000.fr/w/Reconfigurable_Firewall)
- name: Setup IPv6 in VMs' hosts
  run_once: true
  tags: [ create ]
  become: false
  when: enable_ipv6 == True
  block:
    - name: Retrieve list of nodes hosting VMs
      set_fact:
        vm_host_inventory: "{{ groups['VMonG5k'] | map('extract', hostvars) | map(attribute='hypervisor') | list | unique }}"

    - name: Enable forwarding
      become: true
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: 1
        sysctl_set: true
        state: present
      delegate_to: "{{ item }}"
      with_items: "{{ vm_host_inventory }}"

    - name: Retrieve OAR_JOB_ID from each host
      shell: echo $OAR_JOB_ID
      register: oar_job_id
      delegate_to: "{{ item }}"
      with_items: "{{ vm_host_inventory }}"
      changed_when: false

    - name: Create dictionary of hostnames and their OAR_JOB_ID
      set_fact:
        oar_job_id_dict: "{{ oar_job_id_dict | default({}) | combine({item.item: item.stdout}) }}"
      with_items: "{{ oar_job_id.results }}"
      delegate_to: localhost

    - name: Extend oar_job_id_dict with IPv6 addresses
      set_fact:
        oar_job_id_dict: "{{ oar_job_id_dict | combine({item: {'ipv6': item.split('.')[0] + '-ipv6.' + item.split('.')[1] + '.' + item.split('.')[2] + '.' + item.split('.')[3], 'job_id': oar_job_id_dict[item]}}) }}"
      with_items: "{{ vm_host_inventory }}"
      delegate_to: localhost

    - name: Disable firewall rules for each node hosting VMs
      uri:
        url: "https://api.grid5000.fr/stable/sites/{{ site }}/firewall/{{ job_id }}"
        method: POST
        body: '[{"addr": "{{ item.value.ipv6 }}", "proto": "all"}]'
        body_format: json
        status_code:
          - 200
          - 201
          - 202
        headers:
          Content-Type: "application/json"
      with_dict: "{{ oar_job_id_dict }}"
      loop_control:
        loop_var: item
      vars:
        site: "{{ item.key.split('.')[1] }}"
        job_id: "{{ item.value.job_id }}"
      register: curl_result
      delegate_to: "{{ site }}.g5k"
      failed_when: >
        curl_result.status != 200 and
        not (curl_result.status == 400 and 'already exists' in curl_result.json)

- name: Generate and set unique IPv6 addresses for VMs
  tags: [ create ]
  when: enable_ipv6 == True
  block:
    - name: Install dig
      apt:
        name: dnsutils
        state: present

    - name: Retrieve hypervisor address for current node
      set_fact:
        grid_node: "{{ hostvars[inventory_hostname].hypervisor }}"
      changed_when: false

    - name: Build ipv6 address for each VM
      set_fact:
        grid_node_ipv6: "{{ grid_node.split('.',1)[0] + '-ipv6.' + grid_node.split('.',1)[1] }}"
      changed_when: false

    - name: Resolve ip address of attribute grid_node_ipv6
      shell: "dig AAAA +short {{ grid_node_ipv6 }}"
      register: node_ipv6

    - name: Set fact with the resolved ip address
      set_fact:
        node_ipv6: "{{ node_ipv6.stdout }}"

    - name: Get scope link IPv6 of node, keep only address part
      shell: ip -6 -br addr show dev ens3 scope link | awk '{print $3}' | cut -d'/' -f1
      register: vm_ipv6
      changed_when: false

    - name: Generate IPv6 for each VM
      set_fact:
        vm_ipv6_address: >-
          {{
            node_ipv6.split(':')[:5] | join(':')
            + ':2:' +
            vm_ipv6.stdout.split(':')[-2:] | join(':')
          }}
      changed_when: false

    - name: Check if IPv6 address exists on ens3 interface
      shell: ip -6 addr show dev ens3 | grep -q '{{ vm_ipv6_address }}'
      register: ipv6_check
      ignore_errors: true
      changed_when: false

    - name: Set IPv6 address to ens3 interface
      shell: ip -6 addr add {{ vm_ipv6_address }}/128 dev ens3
      when: ipv6_check.rc != 0
      changed_when: true
