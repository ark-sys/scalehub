- name: Post-install configuration
  tags: [ create ]
  block:
    #    - name: Set worker label for agents
    #      kubernetes.core.k8s:
    #        name: "{{ item }}"
    #        api_version: v1
    #        kind: Node
    #        definition:
    #          metadata:
    #            labels:
    #              node-role.kubernetes.io/worker: "{{ hostvars[item].cluster_role }}"
    #        state: present
    #      loop: "{{ groups['agents'] }}"
    #      when: hostvars[item].cluster_role is defined

    - name: Label nodes with a score based on their allocatable resources
      block:
        - name: Get node info
          kubernetes.core.k8s_info:
            kind: Node
          register: node_info

        - name: Set allocatable resources fact
          set_fact:
            node_resources: "{{ node_resources | default({}) | combine({ item.metadata.name: { 'cpu': item.status.allocatable.cpu, 'memory': (item.status.allocatable.memory | regex_replace('Ki$', '') | int / 1024 / 1024) | int } }) }}"
          loop: "{{ node_info.resources }}"
          loop_control:
            label: "{{ item.metadata.name }}"
          when: item.status.allocatable is defined

        - name: Compute node scores
          set_fact:
            node_scores: "{{ node_scores | default({}) | combine({ item.key: (item.value.cpu | int) * (item.value.memory | int) }) }}"
          loop: "{{ node_resources | dict2items }}"
          loop_control:
            label: "{{ item.key }}"

        - name: Give nodes size class based on score. small <= 32, medium <= 256, large <= 1024, x-large > 1024
          set_fact:
            node_size: "{{ node_size | default({}) | combine({ item.key: 'small' if item.value <= 32 else 'medium' if item.value <= 256 else 'large' if item.value <= 1024 else 'x-large' }) }}"
          loop: "{{ node_scores | dict2items }}"
          loop_control:
            label: "{{ item.key }}"

        - name: Combine resources, scores and size for one debuggable
          set_fact:
            final_node_info: "{{ final_node_info | default({}) | combine({ item.key: { 'resources': node_resources[item.key], 'score': node_scores[item.key], 'size': node_size[item.key] } }) }}"
          loop: "{{ node_resources | dict2items }}"
          loop_control:
            label: "{{ item.key }}"

        - name: For each node (key) in final_node_info, set node-role.kubernetes.io/node-size label
          kubernetes.core.k8s:
            name: "{{ item.key }}"
            api_version: v1
            kind: Node
            definition:
              metadata:
                labels:
                  node-role.kubernetes.io/node-size: "{{ item.value.size }}"
            state: present
          loop: "{{ final_node_info | dict2items }}"
          loop_control:
            label: "{{ item.key }}"

    - name: Apply grid5000 role label to grid5000 nodes
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/tnode: "grid5000"
        state: present
      loop: "{{ groups['G5k'] }}"
      when: groups['G5k'] | length > 0 and hostvars[item].cluster_role != 'hypervisor'


    - name: Apply vm_grid5000 role label to vm_grid5000 nodes
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/vm_grid5000: "{{ final_node_info[item].size }}"
              node-role.kubernetes.io/tnode: "vm_grid5000"
        state: present
      loop: "{{ groups['VMonG5k'] }}"
      when: groups['VMonG5k'] is defined and groups['VMonG5k'] | length > 0

    - name: Apply pico role label to pico nodes
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/tnode: "pico"
        state: present
      loop: "{{ groups['pico'] }}"
      when: groups['pico'] is defined and groups['pico'] | length > 0

- name: Unlabel nodes
  tags: [ delete ]
  block:
    - name: Remove worker label for agents
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
        metadata:
          labels:
            node-role.kubernetes.io/worker: null
        state: present
      loop: "{{ groups['agents'] }}"
      when: hostvars[item].cluster_role is defined

    - name: Remove node size label
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
        metadata:
          labels:
            node-role.kubernetes.io/node-size: null
        state: present
      loop: "{{ groups['all'] }}"
      when: node_info is defined

