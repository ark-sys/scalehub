- name: Post-install configuration
  tags: [ create ]
  block:
    - name: Check if all groups are defined in the hosts file
      set_fact:
        vm_grid5000_exists: "{{ 'vm_grid5000' in groups }}"
        grid5000_exists: "{{ 'grid5000' in groups }}"
        pico_exists: "{{ 'pico' in groups }}"

    - name: Apply consumer role label to consumer nodes
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/consumer: ""
              node-role.kubernetes.io/worker: "consumer"
        state: present
      loop: "{{ groups['consumers'] }}"

    - name: Apply producer role label to producer nodes
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/producer: ""
              node-role.kubernetes.io/worker: "producer"
        state: present
      loop: "{{ groups['producers'] }}"

    - block:
        - name: Get node size
          kubernetes.core.k8s_info:
            kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
            kind: Node
            name: "{{ item }}"
          register: node_info
          loop: "{{ groups['all'] }}"

        - name: Retrieve allocatable resources
          set_fact:
            node_resources: "{{ node_resources | default({}) | combine({ item.item: { 'cpu': item.resources[0].status.allocatable.cpu, 'memory': (item.resources[0].status.allocatable.memory | regex_replace('Ki$', '') | int / 1024 / 1024) | int } }) }}"
          loop: "{{ node_info.results }}"
          loop_control:
            label: "{{ item.item }}"
          when: node_info.results is defined and node_info.results | length > 0

        - name: Compute node scores
          set_fact:
            node_scores: "{{ node_scores | default({}) | combine({ item.key: (item.value.cpu | int) * (item.value.memory | int) }) }}"
          loop: "{{ node_resources | dict2items }}"
          loop_control:
            label: "{{ item.key }}"

        - name: Give nodes size class based on score. small <= 16, medium <= 64, large > 64
          set_fact:
            node_size: "{{ node_size | default({}) | combine({ item.key: 'small' if item.value <= 16 else 'medium' if item.value <= 64 else 'large' }) }}"
          loop: "{{ node_scores | dict2items }}"
          loop_control:
            label: "{{ item.key }}"

        - name: Combine resources, scores and size for one debuggable
          set_fact:
            node_info: "{{ node_info | default({}) | combine({ item.key: { 'resources': node_resources[item.key], 'score': node_scores[item.key], 'size': node_size[item.key] } }) }}"
          loop: "{{ node_resources | dict2items }}"
          loop_control:
            label: "{{ item.key }}"

        - name: Display node info
          debug:
            var: node_info

        - name: Label each node with its size
          kubernetes.core.k8s:
            kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
            name: "{{ item }}"
            api_version: v1
            kind: Node
            definition:
              metadata:
                labels:
                  node-role.kubernetes.io/node-size: "{{ node_info[item].size }}"
            state: present
          loop: "{{ groups['all'] }}"
          when: node_info is defined

    - name: Apply grid5000 role label to grid5000 nodes
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/grid5000: ""
              node-role.kubernetes.io/tnode: "grid5000"
        state: present
      loop: "{{ groups['grid5000'] }}"
      when: grid5000_exists


    - name: Apply vm_grid5000 role label to vm_grid5000 nodes
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/vm_grid5000: "{{ node_info[item].size }}"
              node-role.kubernetes.io/tnode: "vm_grid5000"
        state: present
      loop: "{{ groups['vm_grid5000'] }}"
      when: vm_grid5000_exists

    - name: Apply pico role label to pico nodes2
      kubernetes.core.k8s:
        kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
        name: "{{ item }}"
        api_version: v1
        kind: Node
        definition:
          metadata:
            labels:
              node-role.kubernetes.io/pico: ""
              node-role.kubernetes.io/worker: "consumer"
              node-role.kubernetes.io/tnode: "pico"
        state: present
      loop: "{{ groups['pico'] }}"
      when: pico_exists

    ### Init the first node to be schedulable
    - name: first_node is the name of the group, retrieve a node from the group
      set_fact:
        node: "{{ groups[first_node][0] }}"
      when: shub_config['first_node'] is defined

    - name: If first_node is defined, apply SCHEDULABLE label to allow deployment of flink. Otherwise apply over a random consumer node
      kubernetes.core.k8s:
          kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
          name: "{{ node | default(groups['consumers'][0]) }}"
          api_version: v1
          kind: Node
          definition:
            metadata:
              labels:
                  node-role.kubernetes.io/autoscaling: "SCHEDULABLE"
          state: present