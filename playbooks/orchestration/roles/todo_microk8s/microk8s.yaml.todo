---
- name: Setup microk8s on control node
  hosts: control, workers
  become: true
  gather_facts: true
  tags: [ always ]
  tasks:
    - name: Make sure snapd is installed
      package:
        name:
          - snapd
        state: latest
      become: yes

    - name: Check if is raspberry
      shell: "uname -r"
      register: uname

    - name: Install raspberry specific packages
      package:
        name:
          - linux-modules-extra-raspi
        state: latest
      when: uname.stdout | regex_search('raspi')

    - name: Install MicroK8s via snap
      snap:
        name: microk8s
        classic: yes
        channel: "1.28/stable"

    - name: Create kubectl alias
      command: "snap alias microk8s.kubectl kubectl"
      changed_when: false

    - name: Create helm3 alias
      command: "snap alias microk8s.helm3 helm"
      changed_when: false

    - name: Create directory for Consul
      ansible.builtin.file:
        path: /tmp/consul-data
        state: directory
        mode: "0777"
    - name: Create tmp folder for experiment
      ansible.builtin.file:
        path: /tmp/experiment-data
        state: directory
        mode: "0777"


- name: Configure user permission on microk8s
  hosts: control, workers
  tags: [ always ]
  gather_facts: false
  tasks:
    - name: Retrieve username from server
      shell: whoami
      register: username_output

    - name: Save the username to a variable
      set_fact:
        user: "{{ username_output.stdout }}"

    - name: add user to group
      become: true
      ansible.builtin.user:
        name: "{{ user }}"
        groups: microk8s
        append: yes

    - name: Reset ssh connection to allow user changes to affect ansible user
      ansible.builtin.meta:
        reset_connection


- name: Post-install configuration
  hosts: control
  tags: [ always ]
  tasks:
    - name: Waiting for microk8s to be ready on microk8s host master
      shell: "microk8s status --wait-ready"

    - name: Rename context
      command: microk8s config rename-context microk8s scalehub

    - name: Get kubeconfig from MicroK8s
      command: microk8s config
      register: kubeconfig_content

    - name: Save kubeconfig to scalehub container
      delegate_to: localhost
      ansible.builtin.copy:
        content: "{{ kubeconfig_content.stdout }}"
        dest: "{{ kubeconfig_path }}"
        mode: '644'

#    - name: Enable community addons
#      command: microk8s enable community
#
#    - name: Enable multus
#      command: microk8s enable multus


- name: Configure workers
  hosts: workers
  tags: [ always ]
  tasks:
    - name: Get the microk8s join command from the microk8s master
      delegate_to: "{{ groups['control'][0] }}"
      shell: "microk8s add-node | grep -Eo 'microk8s join [^[:space:]]+' | head -n 1 | awk '{print $0}'"
      register: microk8s_join_command

    - name: Apply join on worker nodes
      command: "{{ microk8s_join_command.stdout  }} --worker"

- name: Post-install configuration - Label worker nodes
  hosts: localhost
  tags: [ always ]
  gather_facts: false
  tasks:
    - name: Retrieve worker nodes from inventory
      set_fact:
        worker_hosts: "{{ groups['workers'] }}"
    - name: Retrieve control node from inventory
      set_fact:
        control_host: "{{ groups['control'][0] }}"

    - name: Define total_nodes variable
      set_fact:
        total_nodes: "{{ worker_hosts | length | int }}"

    - name: Calculate number of producer nodes
      set_fact:
        producer_nodes: "{{ (total_nodes | int * 3 / 10) | round | int }}"

    - name: Calculate number of consumer nodes
      set_fact:
        consumer_nodes: "{{ total_nodes | int - producer_nodes | int }}"

    - name: Slice worker_hosts list
      set_fact:
        producer_hosts: "{{ worker_hosts[:producer_nodes | int] }}"
        consumer_hosts: "{{ worker_hosts[producer_nodes | int:] }}"

    - name: Label nodes based on node count
      block:
        - name: Label nodes as worker-producer
          command:
            cmd: "kubectl label nodes {{ item }} --overwrite node-role.kubernetes.io/worker='producer' node-role.kubernetes.io/producer=''"
          with_items:
            - "{{ producer_hosts }}"

        - name: Label nodes as worker-consumer
          command:
            cmd: "kubectl label nodes {{ item }} --overwrite node-role.kubernetes.io/worker='consumer' node-role.kubernetes.io/consumer=''"
          with_items:
            - "{{ consumer_hosts }}"
      when: total_nodes | int >= 3

    - name: Label all nodes as worker-producer and worker-consumer
      command:
        cmd: "kubectl label nodes {{ item }} --overwrite node-role.kubernetes.io/worker='producer' node-role.kubernetes.io/producer='' node-role.kubernetes.io/consumer=''"
      with_items:
        - "{{ worker_hosts }}"
      when: total_nodes | int < 3

    - name: Label control node
      command:
        cmd: "kubectl label nodes {{ control_host }} --overwrite node-role.kubernetes.io/control-plane=true"
