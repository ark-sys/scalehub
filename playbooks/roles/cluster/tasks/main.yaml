- name: Common setup for both workers and controller
  hosts: control, worker
  become: true
  gather_facts: true
  tasks:
#    - name: apt update
#      tags: [always]
#      shell:
#        cmd: apt update
##    - name: apt upgrade
##      tags: [always]
##      shell:
##        cmd: apt upgrade -y
    - name: Install python3-apt
      tags: [always]
      shell:
        cmd: apt-get install -y python3-apt
#    - name: Create /etc/docker

#      tags: [always]
#      shell:
#        cmd: mkdir -p /etc/docker
    - name: Install required system packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - lsb-release
          - gnupg
          - ncdu
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
        update_cache: true

    - name: Create Docker daemon configuration file with size limits for the logging
      ansible.builtin.copy:
        content: |
          {
            "log-driver": "local",
            "log-opts": {
              "max-size": "200m"
            }
          }
        dest: /etc/docker/daemon.json

    - name: Restart Docker service
      ansible.builtin.service:
        name: docker
        state: restarted

#    - name: Install docker
#      tags: [always]
#      ansible.builtin.apt:
#        name: docker.io
#        state: present
#        update_cache: yes

    - name: Create /etc/rancher/k3s
      tags: [always]
      shell:
        cmd: mkdir -p /etc/rancher/k3s
    - name: Disable node exporter
      tags: [always]
      ansible.builtin.service:
        name: prometheus-node-exporter
        state: stopped
        enabled: false
    - name: Create tmp folder for experiment
      ansible.builtin.file:
        path: /tmp/experiment-data
        state: directory
        mode: "0777"
    - name: Create tmp folder for flink
      ansible.builtin.file:
        path: /tmp/experiment-data/flink/tmp
        state: directory
        mode: "0777"
    - name: Create tmp folder for flink checkpoints
      ansible.builtin.file:
        path: /tmp/experiment-data/flink/checkpoints
        state: directory
        mode: "0777"


- name: Install K3S and post-install config
  hosts: control
  become: true
  gather_facts: false
  tasks:
    - name: Install k3s on controller
      environment:
        INSTALL_K3S_EXEC: --disable=traefik --disable=local-storage --docker
        INSTALL_K3S_VERSION: v1.24.8+k3s1
      shell:
        cmd: "curl -sfL https://get.k3s.io | sh -s -"

    - name: Get node token
      tags: [always]
      ansible.builtin.shell:
        cmd: sudo cat /var/lib/rancher/k3s/server/token
      register: NODE_TOKEN

    - name: "Create Dummy Host for saving *global* variable"
      tags: [always]
      add_host:
        name: "CONTROLLER_DETAILS"
        token: "{{ NODE_TOKEN.stdout }}"
        controller_ip: "{{ ansible_default_ipv4.address }}"

    - ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ kubeconfig_path }}"
        flat: true

- name: Setup Workers
  hosts: worker
  become: true
  gather_facts: false
  strategy: free
  tags:
    - worker
  tasks:
    - name: Install k3s on workers
      environment:
        K3S_URL: https://{{ hostvars['CONTROLLER_DETAILS']['controller_ip'] }}:6443
        K3S_TOKEN: "{{ hostvars['CONTROLLER_DETAILS']['token'] }}"
        INSTALL_K3S_EXEC: --docker
        INSTALL_K3S_VERSION: v1.24.8+k3s1
      shell:
        cmd: curl -sfL https://get.k3s.io | sh -s -

- name: Post-install localhost configuration
  hosts: localhost
  gather_facts: false
  connection: local
  tags:
    - kubeconfig
    - always
  tasks:
    - name: Patch kubeconfig
      ansible.builtin.lineinfile:
        path: "{{ kubeconfig_path }}"
        regexp: 127.0.0.1:6443
        line: "    server: https://{{ hostvars['CONTROLLER_DETAILS']['controller_ip'] }}:6443"

    - name: Patch kubeconfig
      ansible.builtin.replace:
        path: "{{ kubeconfig_path }}"
        regexp: default
        replace: exp

    - name: Set correct chmod on kubeconfig
      ansible.builtin.file:
        path: "{{ kubeconfig_path }}"
        mode: "0600"

    - name: Wait for all k3s nodes to be ready
      shell: kubectl wait --for=condition=Ready nodes --all --timeout=600s
      register: nodes_ready
    - debug: var=nodes_ready.stdout_lines

- name: Post-install localhost configuration
  hosts: localhost
  gather_facts: false
  connection: local
  tags:
    - kubeconfig
    - always
  tasks:
    - name: Patch kubeconfig
      ansible.builtin.lineinfile:
        path: "{{ kubeconfig_path }}"
        regexp: 127.0.0.1:6443
        line: "    server: https://{{ hostvars['CONTROLLER_DETAILS']['controller_ip'] }}:6443"

    - name: Patch kubeconfig
      ansible.builtin.replace:
        path: "{{ kubeconfig_path }}"
        regexp: default
        replace: exp

    - name: Set correct chmod on kubeconfig
      ansible.builtin.file:
        path: "{{ kubeconfig_path }}"
        mode: "0600"

    - name: Wait for all k3s nodes to be ready
      shell: kubectl wait --for=condition=Ready nodes --all --timeout=600s
      register: nodes_ready
    - debug: var=nodes_ready.stdout_lines
