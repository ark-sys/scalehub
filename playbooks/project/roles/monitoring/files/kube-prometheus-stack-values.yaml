---
# vim: set ft=yaml:
prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    remoteWrite:
      - url: http://victoria-metrics-single-server.default.svc.cluster.local:8428/api/v1/write
    nodeSelector:
      node-role.kubernetes.io/control-plane: "true"
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance

grafana:
  fullnameOverride: "grafana"
  nodeSelector:
    node-role.kubernetes.io/control-plane: "true"
  enabled: true
  grafana.ini:
    dashboards:
      min_refresh_rate: 5
    auth.anonymous:
      enabled: true
      org_role: Admin
    panels:
      enable_alpha: true
    plugins:
      plugin_admin_enabled: true
      enable_alpha: true
  sidecar:
    datasources:
      enabled: false
      defaultDatasourceEnabled: false
  datasources:
    datsources.yaml:
      apiVersion: 1
      datasources:
        - name: VictoriaMetrics
          type: prometheus
          url: http://victoria-metrics-single-server.default.svc.cluster.local:8428/
          access: proxy
          isDefault: true
  persistence:
    type: pvc
    enabled: true
    existingClaim: grafana-pvc
  initChownData:
    ## If false, data ownership will not be reset at startup
    ## This allows the prometheus-server to be run with an arbitrary user
    ##
    enabled: false

# I still need to check if all the stuff below is needed. For the moment I just keep everything here.
prometheusOperator:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
  nodeSelector:
    node-role.kubernetes.io/control-plane: "true"
kubeApiServer:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
kubelet:
  serviceMonitor:
    relabelings:
      - sourceLabels: [__metrics_path__]
        targetLabel: metrics_path
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
kubeControllerManager:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
coreDns:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
kubeDns:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
kubeEtcd:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
kubeScheduler:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
kubeProxy:
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance
kube-state-metrics:
  nodeSelector:
    node-role.kubernetes.io/control-plane: "true"
  prometheus:
    monitor:
      relabelings:
        - action: replace
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: instance
alertmanager:
  alertmanagerSpec:
    nodeSelector:
      node-role.kubernetes.io/control-plane: "true"
  serviceMonitor:
    relabelings:
      - action: replace
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: instance