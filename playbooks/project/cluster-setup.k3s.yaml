---
- name: Common setup for both workers and controller
  hosts: control, consumers, producers
  become: true
  gather_facts: true
  tags: [ always ]
  tasks:
    - name: Install required system packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - lsb-release
          - gnupg
          - ncdu # Disk usage monitoring
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
        update_cache: true
    - name: Create Docker daemon configuration file with size limits for the logging
      ansible.builtin.copy:
        content: |
          {
            "log-driver": "local",
            "log-opts": {
              "max-size": "200m"
            }
          }
        dest: /etc/docker/daemon.json

    - name: Restart Docker service
      ansible.builtin.service:
        name: docker
        state: restarted
    - name: Disable node exporter
      ansible.builtin.service:
        name: prometheus-node-exporter
        state: stopped
        enabled: false
    - name: Create /etc/rancher/k3s
      ansible.builtin.file:
        path: /etc/rancher/k3s
        state: directory
        mode: "0755"
        recurse: yes
    - name: Create tmp folder for flink checkpoints
      ansible.builtin.file:
        path: /tmp/experiment-data/
        state: directory
        mode: "0777"

- name: Install K3S and setup kubeconfig
  hosts: control
  become: true
  gather_facts: false
  tags: [ always ]
  tasks:
    - name: Install k3s on controller
      environment:
        INSTALL_K3S_EXEC: --disable=traefik,local-storage
        INSTALL_K3S_VERSION: v1.28.3+k3s2
      shell:
        cmd: "curl -sfL https://get.k3s.io | sh -s -"
    - name: Get kubeconfig from controller
      ansible.builtin.shell:
        cmd: cat /etc/rancher/k3s/k3s.yaml
      register: kubeconfig_content
    - name: Replace localhost with control node IP address
      set_fact:
        kubeconfig_content: "{{ kubeconfig_content.stdout | replace('127.0.0.1', hostvars[groups['control'][0]]['ansible_default_ipv4']['address']) }}"
    - name: Save kubeconfig to localhost
      delegate_to: localhost
      ansible.builtin.copy:
        content: "{{ kubeconfig_content }}"
        dest: "{{ kubeconfig_path }}"
        mode: '644'

- name: Install K3S on worker nodes
  hosts: consumers, producers
  become: true
  gather_facts: false
  tags: [ always ]
  tasks:
    - name: Get node token from controller for workers hosts
      delegate_to: "{{ groups['control'][0] }}"
      shell: "cat /var/lib/rancher/k3s/server/node-token"
      register: node_token
    - name: Install k3s on workers
      environment:
        K3S_URL: "https://{{ hostvars[groups['control'][0]]['ansible_default_ipv4']['address'] }}:6443"
        K3S_TOKEN: "{{ node_token.stdout }}"
        INSTALL_K3S_VERSION: v1.28.3+k3s2
      shell:
        cmd: "curl -sfL https://get.k3s.io | sh -s -"
      # Skip this task if the consumers nodes or the producers nodes are the same as the control node. This is a single node cluster.
      when: "inventory_hostname not in groups['control']"

- name: Post-install configuration
  hosts: localhost
  gather_facts: false
  tags: [ always ]
  tasks:
    - name: Wait for all k3s nodes to be ready
      shell: kubectl wait --for=condition=Ready nodes --all --timeout=600s
    - name: Create monitoring namespace
      kubernetes.core.k8s:
        name: monitoring
        api_version: v1
        kind: Namespace
        state: present
    - name: Label nodes
      block:
        - name: Clean all labels from nodes all nodes
          command:
            cmd: "kubectl label nodes --all --overwrite node-role.kubernetes.io/worker- node-role.kubernetes.io/producer- node-role.kubernetes.io/consumer- node-role.kubernetes.io/autoscaling-"
        - name: Retrieve control node from inventory
          set_fact:
            control_host: "{{ groups['control'][0] }}"
        - name: Retrieve consumer nodes from inventory
          set_fact:
            consumer_hosts: "{{ groups['consumers'] }}"
        - name: Retrieve producer nodes from inventory
          set_fact:
            producers_hosts: "{{ groups['producers'] }}"
        - name: Label consumer nodes
          command:
            cmd: "kubectl label nodes {{ item }} --overwrite node-role.kubernetes.io/worker='consumer' node-role.kubernetes.io/consumer=''"
          with_items:
            - "{{ consumer_hosts }}"
        - name: Label producer nodes
          command:
            cmd: "kubectl label nodes {{ item }} --overwrite node-role.kubernetes.io/worker='producer' node-role.kubernetes.io/producer=''"
          with_items:
            - "{{ producers_hosts }}"
        - name: Label control node
          command:
            cmd: "kubectl label nodes {{ control_host }} --overwrite node-role.kubernetes.io/control-plane=true"

        - name: Randomly select a consumer node
          set_fact:
            random_consumer_node: "{{ consumer_hosts | random(seed=42) }}"

        - name: Label a random consumer node with autoscaling
          command:
            cmd: "kubectl label node {{ random_consumer_node }} --overwrite node-role.kubernetes.io/autoscaling='SCHEDULABLE'"

# TODO: find another way to do this
- name: Add secrets to access resources
  hosts: localhost
  gather_facts: false
  tags: [ always ]
  tasks:
    - name: Create Secret to pull images from private registry
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: gitlab-scalehub
            namespace: default
          type: kubernetes.io/dockerconfigjson
          data:
            .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJyZWdpc3RyeS5naXRsYWIuaW5yaWEuZnIiOiB7CgkJCSJhdXRoIjogImFXMWhaMlZmY0hWc2JHVnlPbWRzY0dGMExUSkJla1ZET1hkd2RtUnJYMFZHTmxWdVlqUnUiCgkJfQoJfQp9
    - name: Get kubeconfig from cluster
      shell: kubectl config view --raw --minify
      register: kubeconfig
    - name: Create Secret with kubeconfig in default namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: kube-secret
            namespace: default
          data:
            kubeconfig: "{{ kubeconfig.stdout | b64encode }}"
